name: CI
on: [pull_request, push]

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        with:
          python-version: '3.12.6'

      - run: pip install flake8 black
      - run: pip install -r web_project/requirements.txt


      - name: Run flake8
        run: flake8 web_project/ --config=web_project/.flake8


      - name: Run black and commit changes
        run: |
          black web_project/ --check --config=web_project/pyproject.toml || (
            black web_project/ --config=web_project/pyproject.toml &&
            git config --global user.name 'github-actions' &&
            git config --global user.email 'action@github.com' &&
            git add . &&
            git commit -m "Apply black formatting" &&
            git push origin HEAD:${{ github.ref }}
          )

  test:
    runs-on: ubuntu-latest
    needs: lint  # Ensures this job runs after the lint job


    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        with:
          python-version: '3.12.6'

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-namespace: buildx


      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build and Start Containers
        working-directory: web_project
        run: |
          docker-compose up -d --build

      - name: Wait for PostgreSQL
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          timeout=30  # Timeout duration in seconds
          elapsed=0
          until docker exec web_project-db-1 pg_isready -U postgres || [ $elapsed -ge $timeout ]; do
            sleep 1
            elapsed=$((elapsed + 1))
          done
          if [ $elapsed -ge $timeout ]; then
            echo "Timeout reached, PostgreSQL is not ready!"
            exit 1
          fi

      - name: Run database migrations
        working-directory: web_project
        run: docker-compose exec web_project-web-1 python manage.py migrate

      - name: Run unit tests
        working-directory: web_project
        run: docker-compose exec web_project-web-1 python manage.py test gradebuddy.tests
